@page "/"
@inject ApiService ApiService

<h3>Dashboard</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                Recent Orders
            </div>
            <div class="card-body">
                @if (recentOrders == null)
                {
                    <p>Loading...</p>
                }
                else
                {
                    <ul class="list-group">
                        @foreach (var order in recentOrders.Take(5))
                        {
                            <li class="list-group-item">
                                Order #@order.Id - @order.TotalAmount.ToString("C")
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                Product Inventory
            </div>
            <div class="card-body">
                @if (products == null)
                {
                    <p>Loading...</p>
                }
                else if (!products.Any())
                {
                    <p>No products found</p>
                }
                else
                {
                    <ul class="list-group">
                        @foreach (var product in products)
                        {
                            <li class="list-group-item">
                                @product.Name - Price: @product.Price.ToString("C")
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Order>? recentOrders;
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        var ordersTask = ApiService.GetOrdersAsync();
        var productsTask = ApiService.GetProductsAsync();

        await Task.WhenAll(ordersTask, productsTask);

        recentOrders = (await ordersTask)
            .OrderByDescending(o => o.OrderDate)
            .ToList();

        products = await productsTask;
    }
}