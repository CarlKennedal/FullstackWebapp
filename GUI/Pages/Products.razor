@page "/products"
@inject ApiService ApiService
@inject ILogger<Products> Logger

<h3>Products</h3>

<!-- Add Product Button -->
<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowCreateModal">Add New Product</button>
</div>

<!-- Loading State -->
@if (products == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <!-- Products Table -->
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>
                        @if (product.IsDiscontinued)
                        {
                            <span class="badge bg-danger">Discontinued</span>
                        }
                        else
                        {
                            <span class="badge bg-success">Available</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => EditProduct(product)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Product Modal -->
@if (showModal)
{
    <div class="modal show" style="display: block; background: rgba(0,0,0,0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(currentProduct.Id == 0 ? "Create" : "Edit") Product</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentProduct" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mb-3">
                                @errorMessage
                            </div>
                        }

                        <!-- Product Form Fields -->
                        <div class="mb-3">
                            <label class="form-label">Name *</label>
                            <InputText class="form-control" @bind-Value="currentProduct.Name" />
                            <ValidationMessage For="@(() => currentProduct.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Product Number</label>
                            <InputText class="form-control" @bind-Value="currentProduct.ProductNumber" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <InputText class="form-control" @bind-Value="currentProduct.Category" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="currentProduct.Description" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Price *</label>
                            <InputNumber class="form-control" @bind-Value="currentProduct.Price" />
                            <ValidationMessage For="@(() => currentProduct.Price)" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="currentProduct.IsDiscontinued" />
                            <label class="form-check-label">Discontinued</label>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span> Saving...</span>
                                }
                                else
                                {
                                    <span>Save</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Product>? products;
    private bool showModal = false;
    private bool isSaving = false;
    private string? errorMessage;
    private Product currentProduct = new() { IsDiscontinued = false };

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            products = await ApiService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products");
            errorMessage = "Failed to load products. Please try again.";
        }
    }

    private void ShowCreateModal()
    {
        currentProduct = new Product { IsDiscontinued = false };
        errorMessage = null;
        showModal = true;
    }

    private void EditProduct(Product product)
    {
        currentProduct = new Product
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                IsDiscontinued = product.IsDiscontinued,
                ProductNumber = product.ProductNumber,
                Category = product.Category
            };
        errorMessage = null;
        showModal = true;
    }

    private async Task HandleSubmit()
    {
        isSaving = true;
        errorMessage = null;

        var result = await ApiService.SaveProductAsync(currentProduct);

        if (result.success)
        {
            await LoadProducts();
            showModal = false;
        }
        else
        {
            errorMessage = result.error ?? "Failed to save product";
        }

        isSaving = false;
    }

    private async Task DeleteProduct(int id)
    {
        var (success, error) = await ApiService.DeleteProductAsync(id);
        if (success)
        {
            await LoadProducts();
        }
        else
        {
            errorMessage = error ?? "Failed to delete product";
        }
    }

    private void CloseModal()
    {
        showModal = false;
        errorMessage = null;
    }
}