@page "/customers"
@inject ApiService ApiService
@inject ILogger<Customers> Logger

<h3>Customers</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowCreateModal">Add New Customer</button>
</div>

@if (customers == null)
{
    <p>Loading customers...</p>
}
else
{
    <table class="table table-striped">
        <!-- Your customer table content remains the same -->
    </table>
}

@if (showModal)
{
    <div class="modal show" style="display: block; background: rgba(0,0,0,0.5)">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(currentCustomer.Id == 0 ? "Create" : "Edit") Customer</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentCustomer" OnValidSubmit="@HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mb-3">
                                @errorMessage
                            </div>
                        }

                        <!-- Your form fields remain the same -->

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Customer>? customers;
    private bool showModal = false;
    private string? errorMessage;
    private Customer currentCustomer = new()
        {
            FirstName = string.Empty,
            LastName = string.Empty,
            Email = string.Empty,
            MobilePhone = string.Empty,
            Address = string.Empty
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            customers = await ApiService.GetCustomersAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading customers");
            errorMessage = "Failed to load customers. Please try again.";
        }
    }

    private void ShowCreateModal()
    {
        currentCustomer = new Customer
            {
                FirstName = string.Empty,
                LastName = string.Empty,
                Email = string.Empty,
                MobilePhone = string.Empty,
                Address = string.Empty
            };
        errorMessage = null;
        showModal = true;
    }

    private void EditCustomer(Customer customer)
    {
        currentCustomer = new Customer
            {
                Id = customer.Id,
                FirstName = customer.FirstName,
                LastName = customer.LastName,
                Email = customer.Email,
                MobilePhone = customer.MobilePhone,
                Address = customer.Address ?? string.Empty
            };
        errorMessage = null;
        showModal = true;
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (currentCustomer.Id == 0)
            {
                var (success, _, error) = await ApiService.CreateCustomerAsync(currentCustomer);
                if (success)
                {
                    await LoadCustomers();
                    showModal = false;
                }
                else
                {
                    errorMessage = error ?? "Failed to create customer";
                }
            }
            else
            {
                var (success, error) = await ApiService.UpdateCustomerAsync(currentCustomer);
                if (success)
                {
                    await LoadCustomers();
                    showModal = false;
                }
                else
                {
                    errorMessage = error ?? "Failed to update customer";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving customer");
            errorMessage = "An error occurred while saving. Please try again.";
        }
    }

    private async Task DeleteCustomer(int id)
    {
        try
        {
            var (success, error) = await ApiService.DeleteCustomerAsync(id);
            if (success)
            {
                await LoadCustomers();
            }
            else
            {
                errorMessage = error ?? "Failed to delete customer";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting customer");
            errorMessage = "An error occurred while deleting. Please try again.";
        }
    }

    private void CloseModal()
    {
        showModal = false;
        errorMessage = null;
    }
}